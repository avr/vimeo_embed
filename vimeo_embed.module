<?php
/**
 * @file
 * A custom field formatter to display Vimeo Videos.
 */
/**
 * Implements hook_field_info().
 */
function vimeo_embed_field_info() {
  return array(
    'vimeoid' => array(
      'label' => t('Vimeo Embed'),
      'description' => t('This field stores a Video ID & serialized info about the video.'),
      'settings' => array('max_length' => 60),
      'default_widget' => 'vimeo_id',
      'default_formatter' => 'vimeo_embed_default',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function vimeo_embed_field_is_empty($item, $field) {
  if (empty($item['vimeoid']) && (string) $item['vimeoid'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function vimeo_embed_field_widget_info() {
  return array(
    'vimeo_id' => array(
      'label' => t('Video ID'),
      'field types' => array('vimeoid'),
      'settings' => array('max_length' => 60),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function vimeo_embed_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  
  $element['vimeoid'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['vimeoid']) ? $items[$delta]['vimeoid'] : '',
    '#title' => $element['#title'],
    '#required' => $element['#required'],
  );
  
  $element['vimeoinfo'] = array(
    '#type' => 'hidden',
    '#delta' => $delta,
    '#default_value' => isset($items[$delta]['vimeoinfo']) ? $items[$delta]['vimeoinfo'] : '',
    '#element_validate' => array('vimeo_embed_getinfo'),
  );
  
  return $element;
}

/**
 * Implements hook_field_validate().
 */
function vimeo_embed_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['vimeoid'])) {
      if (!empty($field['settings']['max_length']) && drupal_strlen($item['vimeoid']) > $field['settings']['max_length']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'vimeo_embed_invalid',
          'message' => t('%name: the value may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length'])),
        );
      }
    }
  }
}

function vimeo_embed_getinfo($element, &$form_state) {
  $lang = isset($form_state['values']['language']) ? $form_state['values']['language'] : '' ;
  $delta = $element['#delta'];

  if ($lang) {
    $vidId = $form_state['values'][$element['#parents'][0]][$lang][$delta]['vimeoid'];
    if ($vidId) {
      $url = "http://vimeo.com/api/v2/video/" . $vidId . ".php";
      $result = file_get_contents($url);
      form_set_value($element, $result, $form_state);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function vimeo_embed_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'vimeo_embed_invalid':
      form_error($element, $error['message']);
    break;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function vimeo_embed_field_formatter_info() {
  return array(
    'vimeo_embed_default' => array(
      'label' => t('Vimeo Embed Default'),
      'field types' => array('vimeoid'),
    ),
    'vimeo_embed_custom' => array(
      'label' => t('Vimeo Embed Custom'),
      'field types' => array('vimeoid'),
      // Include/define custom default settings here
      'settings' => array('video_width' => 600, 'video_height' => 400),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function vimeo_embed_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'vimeo_embed_default':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['vimeoid']);
      }
      break;

    case 'vimeo_embed_custom':
      // More elaborate formatters can defer to a theme function for easier
      // customization.
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'embed_video',
          '#video_id' => $item['vimeoid'],
          '#video_info' => $item['vimeoinfo'],
          '#video_width' => $settings['video_width'],
          '#video_height' => $settings['video_height'],
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function vimeo_embed_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'vimeo_embed_custom') {
    $element['video_width'] = array(
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['video_width'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
      '#attributes' => array('inline'),
    );
    $element['video_height'] = array(
      '#title' => t('Height'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['video_height'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
      '#attributes' => array('class' => array('inline')),
    );
  }

  return $element;

}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function vimeo_embed_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'vimeo_embed_custom') {
    $summary = t('Embed Dimensions: @width x @height ', array('@width' => $settings['video_width'], '@height' => $settings['video_height']));
  }

  return $summary;
}

/**
 * Implements hook_theme().
 */
function vimeo_embed_theme($existing, $type, $theme, $path) {
  return array(
    'embed_video' => array(
      'variables' => array('video_id' => NULL, 'video_info' => NULL, 'video_width' => NULL, 'video_height' => NULL),
    ),
  );
}

function theme_embed_video($element) {
  // desired output:
  // <iframe src="http://player.vimeo.com/video/25240787?title=0&amp;byline=0&amp;portrait=0" width="400" height="300" frameborder="0"></iframe>
  
  $output = "";
  
  $output .= "<iframe src='http://player.vimeo.com/video/";
  $output .= $element['video_id'];
  $output .= "?title=0&amp;byline=0&amp;portrait=0'";
  $output .= " width='" . $element['video_width'] . "'";
  $output .= " height='" . $element['video_height'] . "'";
  $output .= " frameborder='0'></iframe>";
  
  return $output;
}

/**
 * Implements hook_filter_info().
 */
function vimeo_embed_filter_info() {
  $filters = array();
  $filters['vimeo_embed'] = array(
    'title' => t('Vimeo Embed'),
    'description' => t('Substitutes [video_thumb:URL caption:"TEXT"] with a thumbnail and caption.'),
    'settings callback' => '_vimeo_embed_filter_settings',
    'default settings' => array(
      'video_player_width' => '400',
      'video_player_height' => '400',
    ),
    'process callback' => '_vimeo_embed_filter_process',
    // 'tips callback' => '_vimeo_embed_filter_tips',
    'weight' => -1, // See http://drupal.org/node/1061244
  );
  return $filters;
}

function _vimeo_embed_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {

  $settings['video_player_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Default width setting'),
    '#default_value' => isset($filter->settings['video_player_width']) ? $filter->settings['video_player_width'] : $defaults['video_player_width'],
    '#maxlength' => 4,
  );
  $settings['video_player_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Default height setting'),
    '#default_value' => isset($filter->settings['video_player_height']) ? $filter->settings['video_player_height'] : $defaults['video_player_height'],
    '#maxlength' => 4,
  );

  return $settings;
}


function _vimeo_embed_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (preg_match_all('/\[video_thumb(\:(.+))?( .+)?\]/isU', $text, $matches_code)) {
    foreach ($matches_code[0] as $ci => $code) {
      $video = array(
        'source' => trim($matches_code[2][$ci]),
      );

      if ($matches_code[3][$ci] && preg_match_all("/\s+([a-zA-Z_]+)\:(\s)?'([0-9a-zA-Z-_\/\/\.:\s]+)(?=')/i", $matches_code[3][$ci], $matches_attributes)) {
        foreach ($matches_attributes[0] AS $ai => $attribute) {
          $video[$matches_attributes[1][$ai]] = $matches_attributes[3][$ai];
        }
      }
      
      $caption = isset($video['caption']) ? "<br />" . $video['caption'] : NULL;

      $replacement = "<span style='margin:0 20px 20px 0; display:block; float:left; width:100px;'>";

      if ($video['source'] == 'placeholder') {
        $img = isset($video['img']) ? "<img src='" . $video['img'] . "' width='100' />" : "<img src='/sites/all/themes/midam/images/placeholder.png' width='100' />";
        
        $linkOpts = array(
          'html' => true,
        );

        $replacement .= $img . $caption;
        
      }
      else {
        $videoID = explode('.com/', $video['source']);
        $video['id'] = $videoID[1];


        // Sets video width & height after any user input has been parsed.
        // First, check if user has set a width.
        if (isset($video['width']) && !isset($video['height'])) {
          $video['height'] = $filter->settings['video_player_height'];
        }
        // Else, if user has set height.
        elseif (isset($video['height']) && !isset($video['width'])) {
          $video['width'] = $video['height'] * $ratio;
        }
        // Maybe both?
        elseif (isset($video['height']) && isset($video['width'])) {
          $video['width'] = $video['width'];
          $video['height'] = $video['height'];
        }
        // Fall back to defaults.
        else {
          $video['width'] = $filter->settings['video_player_width'] != '' ? $filter->settings['video_player_width'] : 400;
          $video['height'] = $filter->settings['video_player_height'] != '' ? $filter->settings['video_player_height'] : 400;
        }

        $img = isset($video['img']) ? "<img src='" . $video['img'] . "' width='100' />" : "<img src='/sites/all/themes/midam/images/placeholder.png' width='100' />";


        $linkOpts = array(
          'attributes' => array(
            // 'class' => array('colorbox-load'),
            'rel' => 'videos',
            'target' => "_blank",
          ),
          'html' => true,
          // 'query' => array(
          //   'width' => $video['width'],
          //   'height' => $video['height'],
          //   'iframe' => 'true',
          // ),
        );
        $replacement .= l($img . $caption, "https://player.vimeo.com/video/" . $video['id'], $linkOpts);
      }
      $replacement .= "</span>";
      
      $text = str_replace($code, $replacement, $text);
    }
  }
  
  return $text;
}